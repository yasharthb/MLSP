# -*- coding: utf-8 -*-
"""ass5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1glXoK5uuEOv6I-dgIPI2D00qtZT4skRS

# Model the Data
Given a set of scalar data, you can model it with a suitable pdf. This exercise will help you learn the following:
- How would you choose the best model to fit the given data?
- How would you estimate the model parameters from the given data?
- Given a model, how do you sample new data from it?

Note: You are allowed to use only numpy and matplotlib libraries. No ML library.
"""

import numpy as np
np.random.seed(111)

def data2gaussian(S):
    '''
    Return optimal parameters - (mu,sigma)
    Inputs:
        S: np array of shape (Ns,). These are samples of a random variable.
    Outputs:
        mu: float
        sigma: float
    '''

    ### WRITE YOUR CODE HERE - 5 MARKS
    mu=np.mean(S)
    sigma = np.std(S) 
    return mu, sigma

def test_data2gaussian(): # checks formatting only
    S = [0.1,-0.2,0.4,0,0]
    mu, sigma = data2gaussian(S)
    print(mu,sigma)
    assert isinstance(mu, (int, float))
    assert isinstance(sigma, (int, float))
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_data2gaussian()

def data2laplacian(S):
    '''
    Return optimal parameters - (mu,b). See https://en.wikipedia.org/wiki/Laplace_distribution
    Inputs:
        S: np array of shape (Ns,). These are samples of a random variable.
    Outputs:
        mu: float
        b: float
    '''

    ### WRITE YOUR CODE HERE - 5 MARKS
    mu = np.median(S)
    b = np.mean(abs(S-mu))
    return mu, b

def test_data2laplacian(): # checks formatting only
    S = [0.1,-0.2,0.4,0,0]
    mu, b = data2laplacian(S)
    print(mu,b)
    assert isinstance(mu, (int, float))
    assert isinstance(b, (int, float))
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_data2laplacian()

def data2uniform(S):
    '''
    Return optimal parameters - (a,b)
    Inputs:
        S: np array of shape (Ns,). These are samples of a random variable.
    Outputs:
        a: float
        b: float
    '''
    
    ### WRITE YOUR CODE HERE - 5 MARKS
    b = np.max(S)
    a = np.min(S)
    return a, b

def test_data2uniform(): # checks formatting only
    S = [0.1,-0.2,0.4,0,0]
    a, b = data2uniform(S)
    print(a,b)
    assert isinstance(a, (int, float))
    assert isinstance(b, (int, float))
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_data2uniform()

def data2model(S):
    '''
    Inputs:
        S: np array of shape (Ns,). These are scalar samples of a random variable.
    Outputs:
        modelName: return one out of these - 'gaussian', 'laplacian', or 
                   'uniform' which best models the data
    '''

    ### WRITE YOUR CODE HERE - 10 MARKS
    mu,sigma = data2gaussian(S)
    mu_l, b = data2laplacian(S)
    a_u,b_u = data2uniform(S)
t    modelName = models[np.argmin([NLL_g,NLL_l,NLL_u])]
    return modelName

def test_data2model(): # checks formatting only
    S = [0.1,-0.2,0.4,0,0]
    modelName = data2model(S)
    assert modelName in ['gaussian', 'laplacian', 'uniform']
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_data2model()

def sampleGMM(pi, mu, sigma, Ns=1):
    '''
    Inputs:
        pi: np.array of shape (K,), p(z_k)
        mu: np.array of shape (K,), mu of kth gaussian
        sigma: np.array of shape (K,), sigma of kth gaussian
        Ns: int, number of samples
    Outputs:
        S: np.array of shape (Ns,), samples from the GMM
    '''

    ### WRITE YOUR CODE HERE - 10 MARKS
    k = np.shape(pi)[0]
    u = np.random.randint(k, size=Ns)
    S = np.zeros(Ns)
    for i in range(Ns):
        S[i] = np.random.normal(mu[u[i]], sigma[u[i]],1) 
    return S

def test_sampleGMM(): # checks formatting only
    pi = [0.3,0.7]
    mu = [-1.1, 1.3]
    sigma = [1.5, 0.4]
    Ns = 5
    S = sampleGMM(pi, mu, sigma, Ns)
    assert S.shape==(5,)
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_sampleGMM()

def data2GMM(S, K):
    '''
    Return optimal parameters - (pi,mu,sigma)
    Inputs:
        S: np array of shape (Ns,Na). These are samples of a random variable. Na can be 1, 2 or 3
    Outputs:
        pi: np array of shape (K,)
        mu: np array of shape (K,Na)
        sigma: np array of shape (K,Na,Na)
    '''

    ### WRITE YOUR CODE HERE - 15 MARKS
    Ns,Na = np.shape(S)
    pi = np.random.random(K)
    mu = np.random.random((K,Na))
    sigma = np.random.random((K,Na,Na))
    prob = np.zeros((Ns,K))
    for i in range(K):
        for j in range(Ns):
            S[:,k] -= 0.5*np.transpose(S[j]-mu)*np.linald.inv(sigma)*(S[j]-mu)
    S = np.exp(S)/(2*np.pi*np.linalg.det(sigma))**Ns
    
    return pi, mu, sigma

def test_data2GMM(): # checks formatting only
    S = np.random.random((10,3))
    pi, mu, sigma = data2GMM(S,2)
    assert pi.shape==(2,)
    assert mu.shape==(2,3)
    assert sigma.shape==(2,3,3)
    print('Test passed', '\U0001F44D')
if __name__=="__main__":
    test_data2GMM()

