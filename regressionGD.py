# -*- coding: utf-8 -*-
"""170822_Asgn3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REoArhkCJp8ZciDlexDFEdesvGfndkW9
"""

import numpy as np
import random
import matplotlib.pyplot as plt

def generate_x(omega, t, x0=0):
    '''
    Inputs:
        omega: scalar float, the angular velocity in radians/s
        t: scalar float, time in s
        x0: scalar float, initial angle at t=0 in radians, default x0=0
    Outputs:
        x: scalar float, angle at t=t in radians, between [0, 2 pi)
    '''

    ### WRITE YOUR CODE HERE - 3 MARKS
    x = omega*t
    q = int(x/(2*np.pi))
    x = x - 2*q*np.pi
    if(np.isclose(x,2*np.pi,0.001)):
      x=0;

    return x

def sample_x(omega, Fs, tfinal):
    '''
    Inputs:
        omega: scalar float, the angular velocity in radians/s
        Fs: (float) sampling rate in Hz
        tfinal: (float) final time in s
    Output:
        xs: (np array, 1D float) samples of x from t=0 to t=tfinal
        ts: (np array, 1D float) samples of t from t=0 to t=tfinal, sampled uniformly
    '''

    ### WRITE YOUR CODE HERE - 5 MARKS
    ts = np.linspace(0,tfinal-1/Fs,tfinal*Fs)
    xs = np.zeros(np.shape(ts))
    for i in range(np.shape(ts)[0]):
      xs[i] = generate_x(omega,ts[i])
#     print(xs,ts)
    return xs, ts

def plot_xs(xs,ts):
    plt.plot(ts, xs, 'bo-')

if __name__=="__main__":
    xs,ts = sample_x(2*4*np.pi, 128, 1)
    n=np.linspace(0,128,128)
    plot_xs(xs,n)
    plt.xlabel("n")
    plt.ylabel("Theta(n)")
    plt.show()

random.seed(4)
set =list(zip(xs,n))
random.shuffle(set)
xs,n =zip(*set)
train_x,train_n =xs[118:],n[118:]
test_x,test_n =xs[:118],n[:118]
train=list(zip(train_x,train_n))
test = list(zip(test_x,test_n))
plt.plot(train_n,train_x, 'b.')
plt.xlabel('n')
plt.ylabel('Theta(n)')
plt.title ("N = 10 Training Set")
plt.show()

def least_square(degree,train_x,train_n,test_x,test_n):
  phi = np.array([[(j/128)**i for i in range(degree)] for j in train_n])
  psi = np.array([[(j/128)**i for i in range(degree)] for j in test_n])
  t = np.array(train_x)
  weight = np.matmul(np.matmul(np.linalg.inv(np.matmul(np.transpose(phi),phi)),np.transpose(phi)),t)
  
  y_train = np.matmul(phi,weight)
  plt.plot(train_n,y_train,'r.')
  plt.plot(train_n,train_x,'b.')
  plt.xlabel('n')
  plt.ylabel('Theta(n)')
  plt.title ("N = 10 M = " +str(degree) +" Training Set")
  plt.ylim(0,6)
  plt.show()
  
  y_test = np.matmul(psi,weight)
  plt.plot(test_n,y_test,'r.')
  plt.plot(test_n,test_x,'b.')
  plt.xlabel('n')
  plt.ylabel('Theta(n)')
  plt.title ("N = 10 M = " +str(degree) +" Test Set")
  plt.ylim(0,6)
  plt.show()

least_square(5,train_x,train_n,test_x,test_n)
least_square(11,train_x,train_n,test_x,test_n)
least_square(20,train_x,train_n,test_x,test_n)

def gd(phi,weight,t,lamda):
  for i in range(75000):
    weight = weight - 0.01 * ((np.dot(np.transpose(phi),(np.dot(phi,weight))-t) +(lamda/2.0)*(np.sign(weight))) / len(t))
  return weight

def regression_gd(degree,train_x,train_n,test_x,test_n):
  phi = np.array([[(j/128)**i for i in range(degree)] for j in train_n])
  psi = np.array([[(j/128)**i for i in range(degree)] for j in test_n])
  t = np.array(train_x)
  weight =np.random.rand(degree)
  weight = gd(phi,weight,t,0)
  
  y_train = np.matmul(phi,weight)
  plt.plot(train_n,y_train,'r.')
  plt.plot(train_n,train_x,'b.')
  plt.xlabel('n')
  plt.ylabel('Theta(n)')
  plt.title ("N = 10 M = " +str(degree) +" Training Set")
  plt.ylim(0,6)
  plt.show()
  
  y_test = np.matmul(psi,weight)
  plt.plot(test_n,y_test,'r.')
  plt.plot(test_n,test_x,'b.')
  plt.xlabel('n')
  plt.ylabel('Theta(n)')
  plt.title ("N = 10 M = " +str(degree)+ " Test Set")
  plt.ylim(0,6)
  plt.show()

regression_gd(5,train_x,train_n,test_x,test_n)
regression_gd(11,train_x,train_n,test_x,test_n)
regression_gd(20,train_x,train_n,test_x,test_n)

def regression_lasso(degree,train_x,train_n,test_x,test_n):
  phi = np.array([[(j/128)**i for i in range(degree)] for j in train_n])
  psi = np.array([[(j/128)**i for i in range(degree)] for j in test_n])
  t = np.array(train_x)
  weight =[]
  lamda =[0]
  lamda = np.array(lamda)
  Error =[]
  i=0
  while(True):
    weight.append([])
    weight[i] =np.random.rand(degree)
    weight[i] = gd(phi,weight[i],t,lamda[i])
    Error.append(lamda[i]*np.sum(np.absolute(weight[i]))+ np.dot(np.transpose(t-np.dot(np.transpose(phi),weight[i])),(t-np.dot(np.transpose(phi),weight[i]))))
    count=0
    for w in weight[i]:
      if(np.absolute(w)<=10**-5):
        count+=1
    if(count>=5):
      break
    i+=1
    lamda =np.append(lamda,[i*0.01])
  print (lamda)
  print (weight[0])
  print(Error)
  plt.plot(lamda,Error,'b-')
  plt.title("Reconstruction Error vs Lambda")
  plt.ylabel("Error")
  plt.xlabel("Lambda")
  plt.show()
  weight = np.transpose(weight)
    
  for i in range(degree):
    plt.plot(lamda,weight[i],'o-')
    plt.title("W["+str(i)+"]  vs lambda")
    plt.xlabel("lamda")
    plt.ylabel("Coefficient "+str(i))
    plt.show()
#   y_train = np.matmul(phi,weight)
#   plt.plot(train_n,y_train,'r.')
#   plt.plot(train_n,train_x,'b.')
#   plt.ylim(0,6)
#   plt.show()
  
#   y_test = np.matmul(psi,weight)
#   plt.plot(test_n,y_test,'r.')
#   plt.plot(test_n,test_x,'b.')
#   plt.ylim(0,6)
#   plt.show()

regression_lasso(10,train_x,train_n,test_x,test_n)